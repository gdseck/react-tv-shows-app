schema {
  query: Root
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Root {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: User
}

# A TV-show
type Show implements Node {
  # The ID of an object
  id: ID!

  # mongodb object id
  _id: String

  # Title of the series
  title: String

  # Year the series was released
  year: String

  # List of creators/writers of the series
  creators: [String]

  # Show poster
  image: String
}

# A connection to a list of items.
type ShowConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ShowEdge]
}

# An edge in a connection.
type ShowEdge {
  # The item at the end of the edge
  node: Show

  # A cursor for use in pagination
  cursor: String!
}

type User implements Node {
  # The ID of an object
  id: ID!
  shows(after: String, first: Int, before: String, last: Int): ShowConnection
  show(id: String!): Show
}
